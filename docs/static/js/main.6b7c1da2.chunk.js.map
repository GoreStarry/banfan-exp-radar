{"version":3,"sources":["components/SpringSlider/SpringSlider.module.scss","components/MeshPolygon/EditLabel/EditLabel.module.scss","ThreeRadarChart/ThreeRadarChart.module.scss","store/useStore.js","components/BgClickOut/index.js","components/BgClickOut/BgClickOut.jsx","components/CusLine/index.js","components/CusLine/CusLine.jsx","components/AbilityPlate/index.js","components/AbilityPlate/AbilityPlate.jsx","utils/rotatePoint.js","components/MeshPolygon/CenterLines/CenterLines.jsx","components/MeshPolygon/CenterLines/index.js","components/SpriteText/SpriteText.jsx","components/SpriteText/index.js","components/SpringSlider/SpringSlider.jsx","components/SpringSlider/index.js","components/MeshPolygon/EditLabel/EditLabel.jsx","components/MeshPolygon/EditLabel/index.js","components/MeshPolygon/Label/index.js","components/MeshPolygon/Label/Label.jsx","components/MeshPolygon/Labels/index.js","components/MeshPolygon/Labels/Labels.jsx","components/MeshPolygon/index.js","components/MeshPolygon/MeshPolygon.jsx","components/BgRadarChart/index.js","components/BgRadarChart/BgRadarChart.jsx","components/Camera/Camera.jsx","components/Camera/index.js","components/Camera/useResetCamera.js","ThreeRadarChart/ThreeRadarChart.jsx","ThreeRadarChart/index.js","App.js","index.js"],"names":["module","exports","useStore","create","devtools","set","get","setState","state","isOnEditLabel","isClickOutLabel","isResetCamera","focusPointIndex","BgClickOut","React","memo","handleClickOut","useCallback","getState","onPointerDown","position","rotation-y","Math","PI","color","transparent","opacity","depthTest","args","CusLine","isThinLineMode","points","x","y","z","isOutlineDashMode","lineWidth","restProps","onUpdate","self","setFromPoints","Line","map","dashed","AbilityPlate","data","maxValue","lengthRadius","outlineColor","refShapeFactor","useRef","refShapePoints","Array","length","useState","shape","setShape","outlinePoints","setOutlinePoints","useSprings","index","onChange","value","current","forEach","nulll","indexPoint","THREE","autoClose","moveTo","lineTo","setSpringsPosition","animateTransition","numAbility","basicAngle","targetAngle","targetValue","delay","cos","sin","useEffect","rotation","side","blending","rotatePoint","cx","cy","angle","radians","CenterLines","centerPoint","offsetY","endPoint","newPoints","positionYTranslateMap","top","bottom","center","SpriteText","children","textHeight","backgroundColor","padding","borderWidth","borderRadius","borderColor","strokeWidth","strokeColor","fontFace","fontSize","fontWeight","textAlign","verticalAlign","text","canvas","document","createElement","ctx","getContext","border","isArray","relBorder","b","relBorderRadius","paddingArray","relPadding","p","lines","split","font","innerWidth","max","line","measureText","width","innerHeight","height","strokeStyle","hb","beginPath","stroke","cornerWidth","filter","d","x0","x1","y0","y1","quadraticCurveTo","fillStyle","x2","y2","closePath","fill","fillRect","translate","textBaseline","drawTextStroke","lineX","lineY","strokeText","fillText","yScale","scale","positionMap","left","right","attach","alphaTest","image","minFilter","gsap","utils","clamp","pipe","mapRange","snap","splitColor","SpringSlider","className","barColor","barHeight","dotSize","dotColor","mainColor","minValue","step","refBar","snapValue","barUnActiveColor","useMemo","useSpring","thumbDotSpringProps","setThumbDotSpring","setTimeout","immediate","offsetWidth","markSpringProps","bind","useDrag","mx","movement","event","preventDefault","stopPropagation","barWidth","clampValue","axis","initial","sty","style","ref","bar","background","div","bar_active","dot__container","box__marker","marker","label__value","dot_thumb","translateMap","EditLabel","forwardRef","onChangeValue","onChangeInputLabel","handleCloseEdit","handleEnterKeyDown","handleDeleteDataItem","isDeleteAble","refIsMount","shallow","onClickAutosizeInput","e","Html","container__edit","transform","container_slider","container__inputs","btn__delete","data-index","onClick","AutosizeInput","defaultValue","onKeyDown","Label","labelMode","mode","setCanvasCursor","setCanvasCursorAsDefault","isLastLabel","distanceFactor","isEditMode","setIsEditMode","refInput","setIsAutosizeInputMount","setIsEditModes","bool","key","onClickLabel","input","focus","toString","onPointerOver","onPointerLeave","Labels","textAlignList","verticalAlignList","handleDeleteData","parseInt","target","dataset","name","MeshPolygon","numPolygonSide","isCenterLineDisplay","isOutlineMode","centerOutLineColor","outOutlineStrokeWidth","fontColor","textStrokeWidth","textStrokeColor","twoPolygon","Two","Polygon","_collection","getPoints","centerIndex","BgRadarChart","numLayer","scaleSize","Camera","maxDistance","minDistance","isPreloadDone","control","startCameraPosition","defaultCameraPosition","defaultCameraLookAtPosition","refCamera","didMount","refOrbitControls","resetCamera","defaultPosition","refControls","lookAtPosition","setSpringCam","resetPosition","from","to","update","onStart","onRest","useResetCamera","listFocusPointPositionList","Fragment","PerspectiveCamera","makeDefault","window","OrbitControls","enableRotate","enablePan","extend","ShaderPass","ThreeRadarChart","isTriggerSaveImage","onCompleteSaveImage","nameSavedImage","canvasBgColor","abilityPlateBgColor","abilityPlateColor","onChangeInputLabelOrigin","drawImageList","drawBorderLineWidthPercent","drawBorderLineColor","refCanvas","cursor","saveImage","a","drawImage","strokeRect","Promise","all","src","resolve","reject","img","Image","crossOrigin","onload","onerror","Date","valueOf","canvasToImage","positionAbilityPlate","indexString","defaultGroupPosition","shadows","alpha","gl","preserveDrawingBuffer","onCreated","camera","scene","viewport","setPixelRatio","devicePixelRatio","domElement","setClearColor","App","href","Object","values","Components","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6b7c1da2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SpringSlider\":\"SpringSlider_SpringSlider__3tfRa\",\"bar\":\"SpringSlider_bar__3HV5W\",\"bar_active\":\"SpringSlider_bar_active__264bU\",\"dot__container\":\"SpringSlider_dot__container__1fqcO\",\"box__marker\":\"SpringSlider_box__marker__guagE\",\"marker\":\"SpringSlider_marker__3wSRI\",\"dot_thumb\":\"SpringSlider_dot_thumb__1_IUC\",\"label__value\":\"SpringSlider_label__value__19qLA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AutosizeInput\":\"EditLabel_AutosizeInput__3BRPr\",\"container_slider\":\"EditLabel_container_slider__2x9rn\",\"container__inputs\":\"EditLabel_container__inputs__RJ3Dj\",\"container__edit\":\"EditLabel_container__edit__u_Yer\",\"btn__delete\":\"EditLabel_btn__delete__2_Epl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ThreeRadarChart\":\"ThreeRadarChart_ThreeRadarChart__1dK7M\"};","import { devtools } from \"zustand/middleware\";\nimport create from \"zustand\";\n\nconst useStore = create(\n  devtools((set, get) => ({\n    setState: (state) => {\n      set(state);\n    },\n    isOnEditLabel: false,\n    isClickOutLabel: false,\n    isResetCamera: false,\n    focusPointIndex: false, //string\n  }))\n);\n\nexport default useStore;\n","import BgClickOut from \"./BgClickOut.jsx\"\n\nexport default BgClickOut\n","import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useStore from \"../../store/useStore\";\n\nconst BgClickOut = React.memo(({}) => {\n  const handleClickOut = useCallback(() => {\n    const { isOnEditLabel } = useStore.getState();\n    isOnEditLabel &&\n      useStore.setState({\n        isClickOutLabel: true,\n      });\n  }, []);\n\n  return (\n    <group\n      onPointerDown={handleClickOut} // prevent slider over drag\n    >\n      <mesh position={[0, 0, -20]} rotation-y={Math.PI / 4}>\n        <meshBasicMaterial\n          color=\"white\"\n          transparent\n          opacity={0}\n          depthTest={false}\n        />\n        <planeBufferGeometry args={[1000, 1000]} />\n      </mesh>\n      <mesh position={[0, 0, -20]} rotation-y={-Math.PI / 4}>\n        <meshBasicMaterial\n          color=\"white\"\n          transparent\n          opacity={0}\n          depthTest={false}\n        />\n        <planeBufferGeometry args={[1000, 1000]} />\n      </mesh>\n    </group>\n  );\n});\n\nBgClickOut.propTypes = {};\n\nexport default BgClickOut;\n","import CusLine from \"./CusLine.jsx\"\n\nexport default CusLine\n","import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Line } from \"@react-three/drei\";\n\nconst CusLine = ({\n  isThinLineMode,\n  color,\n  points = [{ x: 1, y: 1, z: 1 }],\n  isOutlineDashMode,\n  lineWidth = 1,\n  ...restProps\n}) => {\n  const onUpdate = useCallback(\n    (self) =>\n      self.setFromPoints(\n        points\n        // points.map(({ x, y, z }) => ({ x, y, z: z + 0.1 }))\n      ),\n    [points]\n  );\n\n  return isThinLineMode ? (\n    <line>\n      <bufferGeometry onUpdate={onUpdate} />\n      <lineBasicMaterial color={color} />\n    </line>\n  ) : (\n    <Line\n      points={points.map(({ x, y, z = 0 }) => [x, y, z])} // Array of points\n      color={color} // Default\n      lineWidth={lineWidth} // In pixels (default)\n      dashed={isOutlineDashMode} // Default\n      {...restProps}\n    />\n  );\n};\n\nCusLine.propTypes = {};\n\nexport default CusLine;\n","import AbilityPlate from \"./AbilityPlate.jsx\"\n\nexport default AbilityPlate\n","import React, {\n  useRef,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as THREE from \"three\";\nimport { useSprings } from \"react-spring/three\";\n\nimport sty from \"./AbilityPlate.module.scss\";\nimport { useSetState } from \"react-use\";\n\nimport CusLine from \"../CusLine\";\n\nconst AbilityPlate = React.memo(\n  ({\n    data,\n    maxValue,\n    color = \"red\",\n    outlineColor,\n    lengthRadius,\n    ...restProps\n  }) => {\n    const refShapeFactor = useRef();\n    const refShapePoints = useRef(\n      [...Array(data.length)].map(() => ({ x: 0, y: 0, z: 0 }))\n    );\n\n    const [shape, setShape] = useState(null);\n    const [outlinePoints, setOutlinePoints] = useState();\n\n    const [springsPosition, setSpringsPosition] = useSprings(\n      data.length,\n      (index) => ({\n        x: 0,\n        y: 0,\n        onChange: ({ value: { x, y } }) => {\n          refShapePoints.current[index] = { x, y };\n\n          data.forEach((nulll, indexPoint) => {\n            const { x = 0, y = 0 } = refShapePoints.current[indexPoint] || {};\n\n            if (indexPoint === 0) {\n              refShapeFactor.current = new THREE.Shape();\n              refShapeFactor.current.autoClose = true;\n              refShapeFactor.current.moveTo(x, y);\n            } else {\n              refShapeFactor.current.lineTo(x, y);\n            }\n\n            if (indexPoint + 1 === data.length) {\n              setShape(refShapeFactor.current);\n\n              setOutlinePoints([\n                ...refShapePoints.current,\n                refShapePoints.current[0],\n              ]);\n            }\n          });\n        },\n      }),\n      [data.length]\n    );\n\n    const animateTransition = useCallback(\n      (data) => {\n        const numAbility = data.length;\n        const basicAngle = (Math.PI * 2) / numAbility;\n        setSpringsPosition((index) => {\n          const targetAngle = basicAngle * index;\n          const targetValue = data[index].value / maxValue;\n\n          return {\n            delay: index * 80,\n            x: lengthRadius * 0.93 * targetValue * Math.cos(targetAngle),\n            y: lengthRadius * 0.93 * targetValue * Math.sin(targetAngle),\n          };\n        });\n      },\n      [setSpringsPosition]\n    );\n\n    useEffect(() => {\n      animateTransition(data);\n      return () => {};\n    }, [data, animateTransition]);\n\n    // const handleClick = useCallback(() => {\n    //   setSpringsPosition(() => {\n    //     return {\n    //       x: 0,\n    //       y: 0,\n    //       onRest: () => {\n    //         setTimeout(() => {\n    //           animateTransition(data);\n    //         }, 300);\n    //       },\n    //     };\n    //   });\n    // }, [data]);\n\n    return (\n      <group\n        {...restProps}\n        // onClick={handleClick} onPointerDown={handleClick}\n      >\n        <group rotation={[0, 0, Math.PI / 2]}>\n          <mesh>\n            {shape && <shapeBufferGeometry args={[shape]} />}\n            <meshBasicMaterial\n              side={THREE.DoubleSide}\n              color={color}\n              transparent={true}\n              blending={THREE.MultiplyBlending}\n            />\n          </mesh>\n          <mesh>\n            {shape && <shapeBufferGeometry args={[shape]} />}\n            <meshBasicMaterial\n              side={THREE.DoubleSide}\n              color={color}\n              transparent={true}\n              blending={THREE.AdditiveBlending}\n              // wireframe\n            />\n            <CusLine\n              points={outlinePoints}\n              color=\"rgba(0, 168, 255, 0.5)\"\n              lineWidth={3}\n              transparent={true}\n              blending={THREE.AdditiveBlending}\n            />\n          </mesh>\n        </group>\n      </group>\n    );\n  }\n);\n\nAbilityPlate.propTypes = {};\n\nexport default AbilityPlate;\n","export default function rotatePoint(cx, cy, x, y, angle) {\n  var radians = (Math.PI / 180) * angle,\n    cos = Math.cos(radians),\n    sin = Math.sin(radians),\n    nx = cos * (x - cx) + sin * (y - cy) + cx,\n    ny = cos * (y - cy) - sin * (x - cx) + cy;\n  return [nx, ny];\n}\n","import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport CusLine from \"../../CusLine\";\n\nconst CenterLines = React.memo(\n  ({ points, centerPoint, offsetY, color, lineWidth }) => {\n    return points.map((endPoint, index) => {\n      const newPoints = [\n        {\n          x: centerPoint[0],\n          y: centerPoint[1],\n          z: centerPoint[2] + offsetY * 1.3,\n        },\n        endPoint,\n      ];\n      return (\n        <CusLine\n          key={\"line\" + index}\n          points={newPoints}\n          // isThinLineMode={true}\n          lineWidth={lineWidth}\n          color={color}\n        />\n      );\n    });\n  }\n);\n\nCenterLines.propTypes = {};\n\nexport default CenterLines;\n","import CenterLines from \"./CenterLines.jsx\"\n\nexport default CenterLines\n","import React, {\n  useRef,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport * as THREE from \"three\";\nimport PropTypes from \"prop-types\";\n\nconst positionYTranslateMap = {\n  top: -0.5,\n  bottom: 0.5,\n  center: 0,\n};\n\nconst SpriteText = React.memo(\n  ({\n    children,\n    position,\n    textHeight = 0.3,\n    color = \"rgba(255, 255, 255, 1)\",\n    backgroundColor,\n    padding = 0,\n    borderWidth = 0,\n    borderRadius = 0,\n    borderColor = \"white\",\n    strokeWidth = 0.3,\n    strokeColor = \"#fc5603\",\n    fontFace = \"Arial\",\n    fontSize = 90, // defines text resolutio,\n    fontWeight = \"normal\",\n    textAlign = \"center\",\n    verticalAlign = \"center\",\n    ...restProps\n  }) => {\n    const text = children;\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const border = Array.isArray(borderWidth)\n      ? borderWidth\n      : [borderWidth, borderWidth]; // x,y border\n    const relBorder = border.map((b) => b * fontSize * 0.1); // border in canvas units\n\n    const borderRadiusArray = Array.isArray(borderRadius)\n      ? borderRadius\n      : [borderRadius, borderRadius, borderRadius, borderRadius]; // tl tr br bl corners\n\n    const relBorderRadius = borderRadiusArray.map((b) => b * fontSize * 0.1); // border radius in canvas units\n\n    const paddingArray = Array.isArray(padding) ? padding : [padding, padding]; // x,y padding\n    const relPadding = paddingArray.map((p) => p * fontSize * 0.1); // padding in canvas units\n    const lines = text.split(\"\\n\");\n    const font = `${fontWeight} ${fontSize}px ${fontFace}`;\n\n    ctx.font = font; // measure canvas with appropriate font\n    const innerWidth = Math.max(\n      ...lines.map((line) => ctx.measureText(line).width)\n    );\n    const innerHeight = fontSize * lines.length;\n    canvas.width = innerWidth + relBorder[0] * 2 + relPadding[0] * 2;\n    canvas.height = innerHeight + relBorder[1] * 2 + relPadding[1] * 2;\n\n    // paint border\n    if (borderWidth) {\n      ctx.strokeStyle = borderColor;\n\n      if (relBorder[0]) {\n        // left + right borders\n        const hb = relBorder[0] / 2;\n        ctx.lineWidth = relBorder[0];\n        ctx.beginPath();\n        ctx.moveTo(hb, relBorderRadius[0]);\n        ctx.lineTo(hb, canvas.height - relBorderRadius[3]);\n        ctx.moveTo(canvas.width - hb, relBorderRadius[1]);\n        ctx.lineTo(canvas.width - hb, canvas.height - relBorderRadius[2]);\n        ctx.stroke();\n      }\n\n      if (relBorder[1]) {\n        // top + bottom borders\n        const hb = relBorder[1] / 2;\n        ctx.lineWidth = relBorder[1];\n        ctx.beginPath();\n        ctx.moveTo(Math.max(relBorder[0], relBorderRadius[0]), hb);\n        ctx.lineTo(\n          canvas.width - Math.max(relBorder[0], relBorderRadius[1]),\n          hb\n        );\n        ctx.moveTo(\n          Math.max(relBorder[0], relBorderRadius[3]),\n          canvas.height - hb\n        );\n        ctx.lineTo(\n          canvas.width - Math.max(relBorder[0], relBorderRadius[2]),\n          canvas.height - hb\n        );\n        ctx.stroke();\n      }\n\n      if (borderRadius) {\n        // strike rounded corners\n        const cornerWidth = Math.max(...relBorder);\n        const hb = cornerWidth / 2;\n        ctx.lineWidth = cornerWidth;\n        ctx.beginPath();\n        [\n          !!relBorderRadius[0] && [\n            relBorderRadius[0],\n            hb,\n            hb,\n            relBorderRadius[0],\n          ],\n          !!relBorderRadius[1] && [\n            canvas.width - relBorderRadius[1],\n            canvas.width - hb,\n            hb,\n            relBorderRadius[1],\n          ],\n          !!relBorderRadius[2] && [\n            canvas.width - relBorderRadius[2],\n            canvas.width - hb,\n            canvas.height - hb,\n            canvas.height - relBorderRadius[2],\n          ],\n          !!relBorderRadius[3] && [\n            relBorderRadius[3],\n            hb,\n            canvas.height - hb,\n            canvas.height - relBorderRadius[3],\n          ],\n        ]\n          .filter((d) => d)\n          .forEach(([x0, x1, y0, y1]) => {\n            ctx.moveTo(x0, y0);\n            ctx.quadraticCurveTo(x1, y0, x1, y1);\n          });\n        ctx.stroke();\n      }\n    }\n\n    // paint background\n    if (backgroundColor) {\n      ctx.fillStyle = backgroundColor;\n      if (!borderRadius) {\n        ctx.fillRect(\n          relBorder[0],\n          relBorder[1],\n          canvas.width - relBorder[0] * 2,\n          canvas.height - relBorder[1] * 2\n        );\n      } else {\n        // fill with rounded corners\n        ctx.beginPath();\n        ctx.moveTo(relBorder[0], relBorderRadius[0]);\n        [\n          [\n            relBorder[0],\n            relBorderRadius[0],\n            canvas.width - relBorderRadius[1],\n            relBorder[1],\n            relBorder[1],\n            relBorder[1],\n          ], // t\n          [\n            canvas.width - relBorder[0],\n            canvas.width - relBorder[0],\n            canvas.width - relBorder[0],\n            relBorder[1],\n            relBorderRadius[1],\n            canvas.height - relBorderRadius[2],\n          ], // r\n          [\n            canvas.width - relBorder[0],\n            canvas.width - relBorderRadius[2],\n            relBorderRadius[3],\n            canvas.height - relBorder[1],\n            canvas.height - relBorder[1],\n            canvas.height - relBorder[1],\n          ], // b\n          [\n            relBorder[0],\n            relBorder[0],\n            relBorder[0],\n            canvas.height - relBorder[1],\n            canvas.height - relBorderRadius[3],\n            relBorderRadius[0],\n          ], // t\n        ].forEach(([x0, x1, x2, y0, y1, y2]) => {\n          ctx.quadraticCurveTo(x0, y0, x1, y1);\n          ctx.lineTo(x2, y2);\n        });\n        ctx.closePath();\n        ctx.fill();\n      }\n    }\n    ctx.translate(0, 10);\n    ctx.translate(...relBorder);\n    ctx.translate(...relPadding);\n\n    // paint text\n    ctx.font = font; // Set font again after canvas is resized, as context properties are reset\n    ctx.fillStyle = color;\n    ctx.textBaseline = \"bottom\";\n\n    const drawTextStroke = strokeWidth > 0;\n    if (drawTextStroke) {\n      ctx.lineWidth = (strokeWidth * fontSize) / 10;\n      ctx.strokeStyle = strokeColor;\n    }\n\n    lines.forEach((line, index) => {\n      const lineX = (innerWidth - ctx.measureText(line).width) / 2;\n      const lineY = (index + 1) * fontSize;\n\n      drawTextStroke && ctx.strokeText(line, lineX, lineY);\n      ctx.fillText(line, lineX, lineY);\n    });\n\n    const yScale =\n      textHeight * lines.length + border[1] * 2 + paddingArray[1] * 2;\n    const xScale = (yScale * canvas.width) / canvas.height;\n\n    const scale = [xScale, yScale, 0];\n\n    const positionMap = {\n      center: [\n        position[0],\n        position[1] + scale[1] * positionYTranslateMap[verticalAlign],\n        position[2],\n      ],\n      left: [\n        position[0] + scale[0] / 3 + scale[1] / 3,\n        position[1],\n        position[2],\n      ],\n      right: [\n        position[0] - scale[0] / 3 - scale[1] / 3,\n        position[1],\n        position[2],\n      ],\n    };\n\n    return (\n      <sprite scale={scale} position={positionMap[textAlign]} {...restProps}>\n        <spriteMaterial attach=\"material\" transparent alphaTest={0.5}>\n          <canvasTexture\n            key={children + color + textHeight + strokeWidth + strokeColor}\n            attach=\"map\"\n            image={canvas}\n            minFilter={THREE.LinearFilter}\n          />\n        </spriteMaterial>\n      </sprite>\n    );\n  }\n);\n\nSpriteText.propTypes = {\n  children: PropTypes.string,\n  position: PropTypes.array,\n  textHeight: PropTypes.number,\n  color: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  padding: PropTypes.number,\n  borderWidth: PropTypes.number,\n  borderRadius: PropTypes.number,\n  borderColor: PropTypes.string,\n  strokeWidth: PropTypes.number,\n  strokeColor: PropTypes.string,\n  fontFace: PropTypes.string,\n  fontSize: PropTypes.number,\n  fontWeight: PropTypes.string,\n  textAlign: PropTypes.oneOf([\"center\", \"left\", \"right\"]),\n  verticalAlign: PropTypes.oneOf([\"center\", \"top\", \"bottom\"]),\n};\n\nexport default SpriteText;\n","import SpriteText from \"./SpriteText.jsx\"\n\nexport default SpriteText\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport { a, useSpring } from \"react-spring\";\nimport { useDrag } from \"react-use-gesture\";\nimport gsap from \"gsap\";\nimport cx from \"classnames\";\n\nimport sty from \"./SpringSlider.module.scss\";\n\nconst {\n  utils: { pipe, clamp, mapRange, snap, splitColor },\n} = gsap;\n\nconst SpringSlider = ({\n  className,\n  barColor = \"red\",\n  barHeight = \"5px\",\n  dotSize = \"2.2rem\",\n  dotColor = \"white\",\n  mainColor = \"#aac3e0\",\n  value = 0,\n  minValue = 0,\n  maxValue = 5,\n  step = 0.1,\n  onChange,\n  index,\n}) => {\n  const refBar = useRef();\n\n  const snapValue = useCallback(snap(step), []);\n  const barUnActiveColor = useMemo(\n    () => `rgba(${[...splitColor(barColor), 0.3]})`,\n    [barColor]\n  );\n\n  const [thumbDotSpringProps, setThumbDotSpring] = useSpring(\n    () => ({\n      x: 0,\n    }),\n    []\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      setThumbDotSpring({\n        immediate: true,\n        x: mapRange(minValue, maxValue, 0, refBar.current.offsetWidth, value),\n      });\n    }, 30);\n    return () => {};\n  }, []);\n\n  const [markSpringProps, setMarkSpring] = useSpring(() => {\n    return { scale: mapRange(minValue, maxValue, 0, 3.5, value) };\n  }, [value]);\n\n  const bind = useDrag(\n    (state) => {\n      const {\n        movement: [mx],\n        event,\n        // down,\n        // swipe, // [swipeX, swipeY] 0 if no swipe detected, -1 or 1 otherwise\n        // tap, // is the drag assimilated to a tap\n      } = state;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const barWidth = refBar.current.offsetWidth;\n\n      const clampValue = clamp(0, barWidth, mx);\n\n      // console.log(clampValue);\n\n      onChange(\n        snapValue(mapRange(0, barWidth, minValue, maxValue, clampValue)),\n        index\n      );\n      setThumbDotSpring(() => {\n        return {\n          x: clampValue,\n        };\n      });\n    },\n    { axis: \"x\", initial: () => [thumbDotSpringProps.x.get(), 0] }\n  );\n\n  return (\n    <div\n      className={cx(sty.SpringSlider, className)}\n      style={{\n        \"--dot-size\": dotSize,\n        \"--dot-color\": dotColor,\n        \"--bar-color\": barColor,\n        \"--bar-height\": barHeight,\n        \"--label-color\": mainColor,\n      }}\n    >\n      <div\n        ref={refBar}\n        className={sty.bar}\n        style={{ background: barUnActiveColor }}\n      >\n        <a.div\n          className={sty.bar_active}\n          style={{ width: thumbDotSpringProps.x }}\n        ></a.div>\n        <a.div\n          {...bind()}\n          className={sty.dot__container}\n          style={thumbDotSpringProps}\n        >\n          <a.div style={markSpringProps} className={sty.box__marker}>\n            <div className={sty.marker}>🍚</div>\n          </a.div>\n          <div className={sty.label__value}>{value}</div>\n          <div className={sty.dot_thumb}></div>\n        </a.div>\n      </div>\n    </div>\n  );\n};\n\nSpringSlider.propTypes = {\n  barColor: PropTypes.string,\n  barHeight: PropTypes.string,\n  dotSize: PropTypes.string,\n  dotColor: PropTypes.string,\n  value: PropTypes.number,\n  minValue: PropTypes.number,\n  maxValue: PropTypes.number,\n};\n\nexport default SpringSlider;\n","import SpringSlider from \"./SpringSlider.jsx\"\n\nexport default SpringSlider\n","import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Html } from \"@react-three/drei\";\nimport AutosizeInput from \"react-input-autosize\";\nimport shallow from \"zustand/shallow\";\n\nimport SpringSlider from \"../../SpringSlider\";\nimport sty from \"./EditLabel.module.scss\";\nimport useStore from \"../../../store/useStore.js\";\n\nconst translateMap = {\n  top: \"100%\",\n  bottom: \"-50%\",\n  center: \"0%\",\n  left: \"50%\",\n  right: \"-50%\",\n};\n\nconst EditLabel = React.forwardRef(\n  (\n    {\n      position,\n      value,\n      onChangeValue,\n      onChangeInputLabel,\n      index,\n      text,\n      handleCloseEdit,\n      handleEnterKeyDown,\n      textAlign, // left, right, center\n      verticalAlign, // top, bottom, center\n      handleDeleteDataItem,\n      isDeleteAble,\n    },\n    ref\n  ) => {\n    const refIsMount = useRef(false);\n    const { focusPointIndex } = useStore(\n      useCallback(\n        (state) => ({\n          focusPointIndex: state.focusPointIndex,\n        }),\n        []\n      ),\n      shallow\n    );\n\n    useEffect(() => {\n      if (refIsMount.current && focusPointIndex !== index) {\n        handleCloseEdit();\n      } else {\n        refIsMount.current = true;\n      }\n      return () => {};\n    }, [focusPointIndex]);\n\n    const onClickAutosizeInput = useCallback((e) => {\n      e.stopPropagation();\n    }, []);\n\n    return (\n      <Html\n        center\n        // distanceFactor={distanceFactor}\n        position={position}\n      >\n        <div\n          className={sty.container__edit}\n          style={{\n            transform: `translate(${translateMap[textAlign]},${translateMap[verticalAlign]})`,\n          }}\n        >\n          <div className={sty.container_slider}>\n            <SpringSlider\n              value={value}\n              onChange={onChangeValue}\n              index={index}\n\n              // scaleContainer={distanceFactor}\n            />\n          </div>\n          <div className={sty.container__inputs}>\n            {isDeleteAble && (\n              <button\n                className={sty.btn__delete}\n                data-index={index}\n                onClick={handleDeleteDataItem}\n              >\n                −\n              </button>\n            )}\n            <AutosizeInput\n              ref={ref}\n              className={sty.AutosizeInput}\n              defaultValue={text}\n              data-index={index}\n              onChange={onChangeInputLabel}\n              // onBlur={handleCloseEdit}\n              onKeyDown={handleEnterKeyDown}\n              onClick={onClickAutosizeInput}\n              onPointerDown={onClickAutosizeInput}\n            />\n          </div>\n        </div>\n      </Html>\n    );\n  }\n);\n\nEditLabel.propTypes = {};\n\nexport default EditLabel;\n","import EditLabel from \"./EditLabel.jsx\"\n\nexport default EditLabel\n","import Label from \"./Label.jsx\"\n\nexport default Label\n","import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport shallow from \"zustand/shallow\";\n\nimport useStore from \"../../../store/useStore.js\";\nimport SpriteText from \"../../SpriteText\";\n\nimport EditLabel from \"../EditLabel\";\n\nimport sty from \"./Label.module.scss\";\nimport { stubTrue } from \"lodash-es\";\n\nconst Label = ({\n  position,\n  text,\n  value,\n  textAlign,\n  verticalAlign,\n  onChangeInputLabel,\n  onChangeValue,\n  labelMode,\n  color,\n  mode,\n  index,\n  setCanvasCursor,\n  setCanvasCursorAsDefault,\n  isLastLabel,\n  distanceFactor = 10,\n  handleDeleteDataItem,\n  isDeleteAble,\n  ...restProps\n}) => {\n  const [isEditMode, setIsEditMode] = useState(mode === \"edit\");\n  const refInput = useRef();\n  const [isAutosizeInputMount, setIsAutosizeInputMount] = useState(false);\n\n  const { isClickOutLabel } = useStore(\n    useCallback(\n      (state) => ({\n        isClickOutLabel: state.isClickOutLabel,\n      }),\n      []\n    ),\n    shallow\n  );\n\n  const setIsEditModes = useCallback((bool) => {\n    setIsEditMode(bool);\n    useStore.setState({ isOnEditLabel: bool });\n  }, []);\n\n  const handleCloseEdit = useCallback(() => {\n    if (mode === \"editable\") {\n      setIsEditModes(false);\n    }\n  }, []);\n\n  const handleEnterKeyDown = useCallback((e) => {\n    if (e.key === \"Enter\") {\n      handleCloseEdit();\n\n      useStore.setState({ isResetCamera: true });\n    }\n  }, []);\n\n  useEffect(() => {\n    // console.log(isEditMode, isClickOutLabel, isLastLabel);\n    if (isEditMode && isClickOutLabel) {\n      setIsEditModes(false);\n      useStore.setState({ isClickOutLabel: false });\n    } else if (isLastLabel) {\n      useStore.setState({ isClickOutLabel: false });\n    }\n  }, [isClickOutLabel, isEditMode]);\n\n  const onClickLabel = useCallback((e) => {\n    e.stopPropagation();\n    if (mode === \"editable\") {\n      setTimeout(() => {\n        setIsEditModes(true);\n      }, 30);\n      setTimeout(() => {\n        refInput.current?.input?.focus();\n      }, 500);\n      useStore.setState({\n        focusPointIndex: index.toString(),\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isEditMode) {\n      setCanvasCursorAsDefault();\n      setTimeout(() => {\n        setIsAutosizeInputMount(true);\n      }, 0);\n    } else {\n      setIsAutosizeInputMount(false);\n    }\n    return () => {};\n  }, [isEditMode]);\n\n  return isEditMode ? (\n    <EditLabel\n      ref={refInput}\n      position={position}\n      value={value}\n      onChangeValue={onChangeValue}\n      onChangeInputLabel={onChangeInputLabel}\n      index={index}\n      text={text}\n      handleCloseEdit={handleCloseEdit}\n      handleEnterKeyDown={handleEnterKeyDown}\n      textAlign={textAlign}\n      verticalAlign={verticalAlign}\n      handleDeleteDataItem={handleDeleteDataItem}\n      isDeleteAble={isDeleteAble}\n    />\n  ) : (\n    <SpriteText\n      className={sty.SpriteText}\n      onClick={onClickLabel}\n      onPointerDown={onClickLabel}\n      key={`sprite-${text}`}\n      position={position}\n      color={color}\n      textAlign={textAlign}\n      verticalAlign={verticalAlign}\n      onPointerOver={setCanvasCursor}\n      onPointerLeave={setCanvasCursorAsDefault}\n      {...restProps}\n    >\n      {text || \"？？？\"}\n    </SpriteText>\n  );\n};\n\nLabel.propTypes = {};\n\nexport default Label;\n","import Labels from \"./Labels.jsx\"\n\nexport default Labels\n","import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\nconst Labels = React.memo(\n  ({\n    data,\n    points,\n    textAlignList,\n    verticalAlignList,\n    // handleDeleteDataItem\n    // mode,\n    // onChangeInputLabel,\n    // labelMode,\n    // color,\n    // setCanvasCursor,\n    // setCanvasCursorAsDefault,\n    handleDeleteDataItem,\n    ...restProps\n  }) => {\n    const handleDeleteData = useCallback((e) => {\n      handleDeleteDataItem(parseInt(e.target.dataset.index));\n    }, []);\n    // console.log(points, labelList);\n    return data.map(({ name, value }, index) => {\n      return (\n        <Label\n          key={index}\n          index={index}\n          position={[points[index].x, points[index].y, 0.1]}\n          text={name}\n          value={value}\n          textAlign={textAlignList[index]}\n          verticalAlign={verticalAlignList[index]}\n          isLastLabel={data.length === index + 1}\n          handleDeleteDataItem={handleDeleteData}\n          isDeleteAble={data.length > 3}\n          {...restProps}\n        />\n      );\n    });\n  }\n);\n\nLabels.propTypes = {};\n\nexport default Labels;\n","import MeshPolygon from \"./MeshPolygon.jsx\"\n\nexport default MeshPolygon\n","import React, {\n  useRef,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as THREE from \"three\";\nimport Two from \"two.js\";\n\nimport rotatePoint from \"../../utils/rotatePoint.js\";\nimport CusLine from \"../CusLine\";\nimport CenterLines from \"./CenterLines\";\nimport SpriteText from \"../SpriteText\";\nimport Labels from \"./Labels\";\n\n// import sty from \"../BgRadarChart/BgRadarChart.module.scss\";\n\nconst MeshPolygon = React.memo(\n  ({\n    data,\n    centerPoint = [0, 0, 0],\n    numPolygonSide,\n    lengthRadius = 1,\n    color,\n    blending,\n\n    isCenterLineDisplay = false,\n\n    isOutlineMode = false,\n    outlineColor,\n    centerOutLineColor,\n    outOutlineStrokeWidth = 1,\n    isOutlineDashMode = false,\n    isThinLineMode = true,\n\n    fontColor,\n    textHeight,\n    textStrokeWidth,\n    textStrokeColor,\n    labelMode,\n    onChangeInputLabel,\n    onChangeValue,\n    offsetY,\n    setCanvasCursor,\n    setCanvasCursorAsDefault,\n    handleDeleteDataItem,\n    ...restProps\n  }) => {\n    const twoPolygon = useMemo(() => {\n      const twoPolygon = new Two.Polygon(\n        centerPoint[0],\n        centerPoint[1],\n        lengthRadius,\n        numPolygonSide\n      );\n      return twoPolygon;\n    }, [numPolygonSide, lengthRadius]);\n\n    const shape = useMemo(() => {\n      const shape = new THREE.Shape();\n      shape.autoClose = true;\n\n      twoPolygon._collection.forEach(({ x, y }, index) => {\n        const [xRotated, yRotate] = rotatePoint(\n          centerPoint[0],\n          centerPoint[1],\n          x,\n          y,\n          180 / numPolygonSide\n        );\n\n        const target = [xRotated, yRotate];\n        index === 0 ? shape.moveTo(...target) : shape.lineTo(...target);\n      });\n\n      return shape;\n    }, [twoPolygon]);\n\n    const points = useMemo(() => {\n      return shape.getPoints();\n    }, [shape]);\n\n    const [textAlignList, verticalAlignList] = useMemo(() => {\n      const centerIndex =\n        (points.length - 2) / // 2 is extra points\n        2;\n\n      return [\n        points.map((nulll, index) =>\n          index === 0 || index === centerIndex\n            ? \"center\"\n            : index < centerIndex\n            ? \"right\"\n            : \"left\"\n        ),\n        points.map((nulll, index) =>\n          index === 0 ? \"bottom\" : index === centerIndex ? \"top\" : \"center\"\n        ),\n      ];\n    }, [points]);\n\n    return (\n      shape && (\n        <group {...restProps}>\n          {!isOutlineMode && (\n            <mesh>\n              <shapeBufferGeometry args={[shape]} />\n              <meshBasicMaterial\n                color={color}\n                side={THREE.DoubleSide}\n                transparent={true}\n                blending={blending}\n              />\n            </mesh>\n          )}\n\n          <CusLine\n            color={outlineColor}\n            points={points}\n            lineWidth={outOutlineStrokeWidth}\n            isThinLineMode={isThinLineMode}\n          />\n\n          {isCenterLineDisplay && (\n            <CenterLines\n              points={points}\n              lineWidth={outOutlineStrokeWidth}\n              centerPoint={centerPoint}\n              offsetY={offsetY}\n              color={centerOutLineColor || outlineColor}\n            />\n          )}\n\n          {isCenterLineDisplay && (\n            <Labels\n              data={data}\n              points={points}\n              color={fontColor}\n              textHeight={textHeight}\n              strokeWidth={textStrokeWidth}\n              strokeColor={textStrokeColor}\n              textAlignList={textAlignList}\n              verticalAlignList={verticalAlignList}\n              mode={labelMode}\n              onChangeInputLabel={onChangeInputLabel}\n              onChangeValue={onChangeValue}\n              setCanvasCursor={setCanvasCursor}\n              setCanvasCursorAsDefault={setCanvasCursorAsDefault}\n              handleDeleteDataItem={handleDeleteDataItem}\n            />\n          )}\n        </group>\n      )\n    );\n  }\n);\n\nMeshPolygon.propTypes = {\n  data: PropTypes.array,\n  centerPoint: PropTypes.array,\n  isOutlineMode: PropTypes.bool,\n  isCenterLineDisplay: PropTypes.bool,\n  numPolygonSide: PropTypes.number,\n  isOutlineDashMode: PropTypes.bool,\n  isThinLineMode: PropTypes.bool,\n  lengthRadius: PropTypes.number,\n  renderExtendComponent: PropTypes.func,\n};\n\nexport default MeshPolygon;\n","import BgRadarChart from \"./BgRadarChart.jsx\"\n\nexport default BgRadarChart\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as THREE from \"three\";\n\nimport MeshPolygon from \"../MeshPolygon\";\n\nimport sty from \"./BgRadarChart.module.scss\";\n\nconst BgRadarChart = ({\n  data,\n  numAbility,\n  numLayer = 3,\n  color,\n  fontColor,\n  textHeight,\n  textStrokeWidth,\n  textStrokeColor,\n  outlineColor,\n  outOutlineStrokeWidth,\n  centerOutLineColor,\n  offsetY,\n  lengthRadius,\n  labelMode,\n  onChangeInputLabel,\n  onChangeValue,\n  setCanvasCursor,\n  setCanvasCursorAsDefault,\n  handleDeleteDataItem,\n  children,\n}) => {\n  return (\n    <group>\n      <MeshPolygon\n        data={data}\n        numPolygonSide={numAbility}\n        color={color}\n        isCenterLineDisplay={true}\n        fontColor={fontColor}\n        textHeight={textHeight}\n        textStrokeWidth={textStrokeWidth}\n        textStrokeColor={textStrokeColor}\n        outlineColor={outlineColor}\n        centerOutLineColor={centerOutLineColor}\n        offsetY={offsetY}\n        lengthRadius={lengthRadius}\n        labelMode={labelMode}\n        onChangeInputLabel={onChangeInputLabel}\n        onChangeValue={onChangeValue}\n        setCanvasCursor={setCanvasCursor}\n        setCanvasCursorAsDefault={setCanvasCursorAsDefault}\n        handleDeleteDataItem={handleDeleteDataItem}\n        blending={THREE.AdditiveBlending}\n        isThinLineMode={false}\n        outOutlineStrokeWidth={outOutlineStrokeWidth}\n      />\n      <group>\n        {[...Array(numLayer)].map((nulll, index) => {\n          const scaleSize = index / numLayer;\n\n          return (\n            <MeshPolygon\n              key={\"layer\" + index}\n              color={index % 2 ? \"#4c5c70\" : \"#37414e\"}\n              blending={\n                index % 2 ? THREE.MultiplyBlending : THREE.AdditiveBlending\n              }\n              isThinLineMode={false}\n              outOutlineStrokeWidth={outOutlineStrokeWidth}\n              numPolygonSide={numAbility}\n              scale={[scaleSize, scaleSize, 1]}\n              position={[0, 0, (offsetY / (numLayer - 1)) * (numLayer - index)]}\n              outlineColor={outlineColor}\n              lengthRadius={lengthRadius}\n            />\n          );\n        })}\n      </group>\n    </group>\n  );\n};\n\nBgRadarChart.propTypes = {};\n\nexport default BgRadarChart;\n","import React, {\n  useRef,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { PerspectiveCamera, OrbitControls } from \"@react-three/drei\";\nimport Two from \"two.js\";\nimport shallow from \"zustand/shallow\";\n\nimport useStore from \"../../store/useStore.js\";\nimport useResetCamera from \"./useResetCamera.js\";\nimport rotatePoint from \"../../utils/rotatePoint.js\";\n\nconst Camera = React.memo(\n  ({\n    maxDistance = 10,\n    minDistance = 0,\n\n    isPreloadDone = true,\n    control,\n    numAbility,\n    lengthRadius,\n    centerPoint,\n    startCameraPosition = [0, 0, 5],\n    // defaultCameraPosition = [2.5, -2, 4],\n    defaultCameraPosition = [0, 0, 5],\n    defaultCameraLookAtPosition = [0, 0, 0],\n  }) => {\n    const refCamera = useRef(null);\n    const didMount = useRef(false);\n    const refOrbitControls = useRef(null);\n    // const defaultCameraPosition = [-8, 8, 6]\n\n    const { isClickOutLabel, isResetCamera, focusPointIndex } = useStore(\n      useCallback(\n        (state) => ({\n          isClickOutLabel: state.isClickOutLabel,\n          isResetCamera: state.isResetCamera,\n          focusPointIndex: state.focusPointIndex,\n        }),\n        []\n      ),\n      shallow\n    );\n\n    const resetCamera = useResetCamera({\n      defaultPosition: defaultCameraPosition,\n      refControls: refOrbitControls,\n      defaultCameraLookAtPosition,\n      refCamera,\n    });\n\n    useEffect(() => {\n      if (isClickOutLabel || isResetCamera) {\n        resetCamera();\n        useStore.setState({\n          isResetCamera: false,\n          focusPointIndex: false,\n        });\n      }\n      return () => {};\n    }, [isClickOutLabel, isResetCamera]);\n\n    useEffect(() => {\n      if (isPreloadDone) {\n        // refCamera.current.lookAt(0, 2, 0)\n\n        resetCamera();\n\n        setTimeout(() => {\n          // setIsLockMaxDistance(true);\n        }, 5000);\n      }\n      return () => {};\n    }, [isPreloadDone]);\n\n    const listFocusPointPositionList = useMemo(() => {\n      const twoPolygon = new Two.Polygon(\n        centerPoint[0],\n        centerPoint[1],\n        lengthRadius * 3,\n        numAbility\n      );\n\n      return twoPolygon._collection.map(({ x, y }, index) => {\n        return [\n          ...rotatePoint(\n            centerPoint[0],\n            centerPoint[1],\n            x,\n            y,\n            180 / numAbility\n          ),\n          lengthRadius * 2.5,\n        ];\n      });\n    }, [numAbility, lengthRadius]);\n\n    useEffect(() => {\n      if (!didMount.current) {\n        didMount.current = true;\n      } else if (focusPointIndex !== false && listFocusPointPositionList) {\n        resetCamera(\n          listFocusPointPositionList[focusPointIndex],\n          [0, 0, -1]\n          // focusPointIndex === \"0\" ? [0, 0, -1] : [0, 0, -1]\n        );\n      }\n      return () => {};\n    }, [focusPointIndex, listFocusPointPositionList]);\n\n    return (\n      <React.Fragment>\n        <PerspectiveCamera\n          makeDefault\n          ref={refCamera}\n          position={startCameraPosition}\n          args={[60, window.innerWidth / window.innerHeight, 1, 2000]}\n        />\n        <OrbitControls\n          ref={refOrbitControls}\n          enableRotate={control}\n          enablePan={control}\n          // because use perspectiveCamera so use maxDistance instead of maxZoom\n          // maxDistance={isLockMaxDistance ? maxDistance : undefined}\n          // minDistance={minDistance}\n        />\n      </React.Fragment>\n    );\n  }\n);\n\nCamera.propTypes = {\n  focusPointIndex: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  isPreloadDone: PropTypes.bool,\n  numAbility: PropTypes.number,\n  // isLoadingDone: PropTypes.bool,\n};\n\nexport default Camera;\n","import Camera from \"./Camera.jsx\"\n\nexport default Camera\n","import React, {\n  useRef,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport { useSpring } from \"react-spring/three\";\nimport * as THREE from \"three\";\n\nexport default function useResetCamera({\n  defaultPosition = [0, 1, 0],\n  defaultCameraLookAtPosition,\n  refControls,\n  refCamera,\n}) {\n  const [, setSpringCam] = useSpring(\n    { position: defaultPosition, lookAtPosition: defaultCameraLookAtPosition },\n    []\n  );\n\n  const resetCamSpring = (\n    resetPosition = defaultPosition,\n    lookAtPosition = defaultCameraLookAtPosition\n  ) => {\n    setSpringCam({\n      from: {\n        position: [\n          refCamera.current.position.x,\n          refCamera.current.position.y,\n          refCamera.current.position.z,\n        ],\n        // lookAtPosition: defaultCameraLookAtPosition,\n      },\n      to: { position: resetPosition, lookAtPosition },\n      onChange: ({ value: { position, lookAtPosition } }) => {\n        refCamera.current.position.set(...position);\n        refControls.current.target = new THREE.Vector3(...lookAtPosition);\n        refControls.current.update();\n      },\n      onStart: () => {\n        // refControls.current.enabled = false;\n      },\n      onRest: () => {\n        // refControls.current.enabled = true;\n      },\n    });\n  };\n\n  return resetCamSpring;\n}\n","import React, {\n  useRef,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport * as THREE from \"three\";\nimport PropTypes from \"prop-types\";\nimport { Canvas, useThree, extend } from \"@react-three/fiber\";\n// import * as THREE from \"three\";\nimport canvasToImage from \"canvas-to-image\";\nimport _ from \"lodash\";\nimport cx from \"classnames\";\nimport { Effects } from \"@react-three/drei\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport { FXAAShader } from \"three/examples/jsm/shaders/FXAAShader\";\n\nimport useStore from \"../store/useStore.js\";\n\nimport BgClickOut from \"../components/BgClickOut\";\nimport AbilityPlate from \"../components/AbilityPlate\";\nimport BgRadarChart from \"../components/BgRadarChart\";\nimport Camera from \"../components/Camera\";\n\nimport sty from \"./ThreeRadarChart.module.scss\";\n\nextend({ ShaderPass });\n\nconst ThreeRadarChart = ({\n  className,\n  centerPoint = [0, 0, 0],\n  lengthRadius = 1,\n  maxValue = 5,\n  data = [\n    { name: \"我齁\", value: 5 },\n    { name: \"美術\", value: 3 },\n    { name: \"測試試\", value: 0.5 },\n    { name: \"創意\", value: 3 },\n    { name: \"耐玩\", value: 5 },\n    { name: \"策略\", value: 1 },\n  ],\n  control = true,\n  isTriggerSaveImage,\n  onCompleteSaveImage,\n  nameSavedImage,\n  children,\n  canvasBgColor = \"transparent\",\n  fontColor = \"white\",\n  textHeight = 0.22,\n  textStrokeWidth = 0,\n  textStrokeColor = \"white\",\n  outlineColor = \"#aac3e0\",\n  outOutlineStrokeWidth = 1.2,\n  centerOutLineColor,\n  abilityPlateBgColor = \"#313b47\",\n  abilityPlateColor = \"#2E5E79\",\n  offsetY = 0.15,\n  // focusPointIndex = false,\n  // isAutoDetectFocusPointIndex = true,\n  labelMode = \"editable\",\n  onChangeInputLabel: onChangeInputLabelOrigin,\n  onChangeValue,\n  handleDeleteDataItem,\n  drawImageList = [],\n  drawBorderLineWidthPercent,\n  drawBorderLineColor,\n\n  ...restProps\n}) => {\n  const refCanvas = useRef();\n  const refCacheData = useRef();\n\n  const setCanvasCursor = useCallback(() => {\n    refCanvas.current.style.cursor = \"pointer\";\n  }, []);\n  const setCanvasCursorAsDefault = useCallback(() => {\n    refCanvas.current.style.cursor = \"default\";\n  }, []);\n\n  const saveImage = useCallback(async () => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const { width, height } = refCanvas.current;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n\n    ctx.drawImage(refCanvas.current, 0, 0);\n\n    if (drawBorderLineColor && drawBorderLineWidthPercent) {\n      ctx.lineWidth = width * drawBorderLineWidthPercent * 2;\n      ctx.strokeStyle = drawBorderLineColor;\n      ctx.strokeRect(0, 0, width, height);\n    }\n\n    await Promise.all(\n      drawImageList.map(({ src, x, y, width, height }) => {\n        return new Promise((resolve, reject) => {\n          let img = new Image();\n          img.crossOrigin = \"anonymous\";\n\n          img.onload = () => {\n            ctx.drawImage(img, x, y, width, height);\n            resolve();\n          };\n          img.onerror = reject;\n          img.src = src + \"?time=\" + new Date().valueOf();\n        });\n      })\n    );\n\n    canvasToImage(canvas, nameSavedImage);\n  }, [drawImageList]);\n\n  // const autoDetectFocusPointIndex = useMemo(() => {\n  //   if (!refCacheData.current) {\n  //     refCacheData.current = data;\n  //     return false;\n  //   }\n\n  //   if (isAutoDetectFocusPointIndex) {\n  //     const diffIndex = data.findIndex((item, index) => {\n  //       // console.log(Object.keys(difference(item, refCacheData.current[index])));\n  //       return (\n  //         Object.keys(difference(item, refCacheData.current[index])).length !==\n  //         0\n  //       );\n  //     });\n  //     refCacheData.current = data;\n\n  //     return diffIndex === -1 ? false : diffIndex.toString();\n  //   } else {\n  //     return false;\n  //   }\n  // }, [data]);\n\n  useEffect(() => {\n    if (isTriggerSaveImage) {\n      saveImage();\n      onCompleteSaveImage();\n    }\n    return () => {};\n  }, [isTriggerSaveImage]);\n\n  const positionAbilityPlate = useMemo(\n    () => [\n      0,\n      0,\n      0 + offsetY * 1.3 + 0.001,\n      // 0.15\n    ],\n    []\n  );\n\n  const onChangeInputLabel = useCallback((e) => {\n    const {\n      value,\n      dataset: { index: indexString },\n    } = e.target;\n    onChangeInputLabelOrigin(value, parseInt(indexString));\n  }, []);\n\n  const numAbility = data.length < 3 ? 3 : data.length;\n\n  const defaultGroupPosition = useMemo(() => [0, -0.5, 0], []);\n\n  return (\n    <div\n      className={cx(sty.ThreeRadarChart, className)}\n      // onClick={saveImage}\n    >\n      <Canvas\n        shadows\n        key={canvasBgColor}\n        alpha\n        gl={{ preserveDrawingBuffer: true }}\n        onCreated={({ camera, gl, scene, viewport }) => {\n          gl.setPixelRatio(window.devicePixelRatio || 2);\n          refCanvas.current = gl.domElement;\n          if (canvasBgColor && canvasBgColor !== \"transparent\") {\n            scene.background = new THREE.Color(canvasBgColor);\n          } else {\n            scene.background = null;\n            gl.setClearColor(0x000000, 0);\n          }\n        }}\n        {...restProps}\n      >\n        <group\n          scale={1.3}\n          position={defaultGroupPosition}\n          // rotation={[-Math.PI / 100, -Math.PI / 100, 0]}\n        >\n          <BgClickOut />\n\n          <BgRadarChart\n            data={data}\n            numAbility={numAbility}\n            numLayer={maxValue}\n            color={abilityPlateBgColor}\n            outlineColor={outlineColor}\n            centerOutLineColor={centerOutLineColor}\n            outOutlineStrokeWidth={outOutlineStrokeWidth}\n            fontColor={fontColor}\n            textHeight={textHeight}\n            textStrokeWidth={textStrokeWidth}\n            textStrokeColor={textStrokeColor}\n            offsetY={offsetY}\n            lengthRadius={lengthRadius}\n            labelMode={labelMode}\n            onChangeInputLabel={onChangeInputLabel}\n            onChangeValue={onChangeValue}\n            labelMode={labelMode}\n            setCanvasCursor={setCanvasCursor}\n            setCanvasCursorAsDefault={setCanvasCursorAsDefault}\n            handleDeleteDataItem={handleDeleteDataItem}\n          />\n          <AbilityPlate\n            data={data}\n            maxValue={maxValue}\n            color={abilityPlateColor}\n            outlineColor={outlineColor}\n            position={positionAbilityPlate}\n            lengthRadius={lengthRadius}\n          />\n        </group>\n        {children}\n        <Camera\n          // focusPointIndex={autoDetectFocusPointIndex || focusPointIndex}\n          control={control}\n          numAbility={numAbility}\n          lengthRadius={lengthRadius}\n          centerPoint={centerPoint}\n        />\n        {/* {refCanvas.current && (\n          <Effects>\n            <shaderPass\n              attachArray=\"passes\"\n              args={[FXAAShader]}\n              material-uniforms-resolution-value={[\n                1 / refCanvas.current.width,\n                1 / refCanvas.current.height,\n              ]}\n              renderToScreen\n            />\n          </Effects>\n        )} */}\n        {/* {control && <OrbitControls />} */}\n      </Canvas>\n    </div>\n  );\n};\n\nThreeRadarChart.propTypes = {\n  labelMode: PropTypes.oneOf([\n    \"editable\", // auto switch to input if click label\n    \"edit\", // input mode\n    \"display\", // canvas sprite\n  ]),\n  isTriggerSaveImage: PropTypes.bool,\n  onCompleteSaveImage: PropTypes.func,\n  nameSavedImage: PropTypes.string,\n  maxValue: PropTypes.number,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.number,\n    })\n  ),\n  drawImageList: PropTypes.arrayOf(\n    PropTypes.shape({\n      src: PropTypes.string,\n      x: PropTypes.number,\n      y: PropTypes.number,\n      width: PropTypes.number,\n      height: PropTypes.number,\n    })\n  ),\n  onChangeInputLabel: PropTypes.func,\n  canvasBgColor: PropTypes.string,\n  fontColor: PropTypes.string,\n  outlineColor: PropTypes.string,\n  outOutlineStrokeWidth: PropTypes.number,\n  abilityPlateBgColor: PropTypes.string,\n  abilityPlateColor: PropTypes.string,\n  focusPointIndex: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n};\n\nexport default ThreeRadarChart;\n\nfunction difference(object, base) {\n  return _.transform(object, (result, value, key) => {\n    if (!_.isEqual(value, base[key])) {\n      result[key] =\n        _.isObject(value) && _.isObject(base[key])\n          ? difference(value, base[key])\n          : value;\n    }\n  });\n}\n","import ThreeRadarChart from \"./ThreeRadarChart.jsx\"\n\nexport default ThreeRadarChart\n","import React from \"react\";\nimport * as Components from \"./lib.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>All Lib Components</h1>\n      <a href=\"./storybook\">Go Stroybook</a>\n      {Object.values(Components).map((Component) => {\n        return (\n          <div>\n            <Component />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}